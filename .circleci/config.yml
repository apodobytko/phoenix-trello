version: 2
jobs:
  build:
    parallelism: 1
    docker:
      - image: circleci/elixir:1.7.4-node-browsers
      - image: circleci/postgres:9.5.11-alpine

    steps:
      - checkout
      - run: cp .env.test.example .env.test
      - run: mkdir test-reports
      - run:
          name: Start chromedriver
          command: |
            chromedriver --port=4444 --url-base=wd/hub
          background: true

      - run: mix local.hex --force
      - run: mix local.rebar --force

      - restore_cache:
          keys:
            - dependency-cache-v1-{{ .Branch }}-{{ checksum "mix.lock" }}
            - dependency-cache-v1-{{ .Branch }}
            - dependency-cache-v1
      - restore_cache:
          keys:
            - build-cache-v1-{{ .Branch }}
            - build-cache-v1
      - run: mix do deps.get --only test, deps.compile, compile --warnings-as-errors
      - save_cache:
          key: dependency-cache-v1-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:
          key: dependency-cache-v1-{{ .Branch }}
          paths: "deps"
      - save_cache:
          key: dependency-cache-v1
          paths: "deps"
      - save_cache:
          key: build-cache-v1-{{ .Branch }}
          paths: "_build"
      - save_cache:
          key: build-cache-v1
          paths: "_build"

      - restore_cache:
          keys:
            - npm-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-cache-v1-{{ .Branch }}
            - npm-cache-v1
      - run: npm install && node_modules/.bin/webpack --mode production
      - save_cache:
          key: npm-cache-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths: "node_modules"
      - save_cache:
          key: npm-cache-v1-{{ .Branch }}
          paths: "node_modules"
      - save_cache:
          key: npm-cache-v1
          paths: "node_modules"
        
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: 
          name: Run tests
          command: |
            set +e
            env $(cat .env.test | xargs) mix test --trace
            exit 0
      - run:
          name: Rerun failed tests
          command: env $(cat .env.test | xargs) mix test --failed --trace

      - store_artifacts:
          path: test-reports
